-- MySQL Script generated by MySQL Workbench
-- Mon Oct 23 16:52:36 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema Tiendad_musica
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Tiendad_musica
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Tiendad_musica` DEFAULT CHARACTER SET utf8 ;
USE `Tiendad_musica` ;

-- -----------------------------------------------------
-- Table `Tiendad_musica`.`Cancion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Cancion` ;

CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Cancion` (
  `Id_cancion` INT NOT NULL,
  `Publica` VARCHAR(25) NOT NULL,
  `Titulo` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`Id_cancion`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tiendad_musica`.`Album`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Album` ;

CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Album` (
  `Id_album` INT NOT NULL,
  `Fecha_publicacion` DATE NOT NULL,
  `Numero_canciones` INT NOT NULL,
  `Titulo` VARCHAR(25) NOT NULL,
  PRIMARY KEY (`Id_album`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tiendad_musica`.`Grupo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Grupo` ;

CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Grupo` (
  `Nombre` VARCHAR(25) NOT NULL,
  `Componen` VARCHAR(45) NOT NULL,
  `Fecha_creacion` DATE NOT NULL,
  `Album_Id_album` INT NOT NULL,
  PRIMARY KEY (`Nombre`, `Album_Id_album`),
  CONSTRAINT `fk_Grupo_Album1`
    FOREIGN KEY (`Album_Id_album`)
    REFERENCES `Tiendad_musica`.`Album` (`Id_album`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Grupo_Album1_idx` ON `Tiendad_musica`.`Grupo` (`Album_Id_album` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `Tiendad_musica`.`Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Usuario` ;

CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Usuario` (
  `Id_usuario` INT NOT NULL,
  `Correo` VARCHAR(25) NOT NULL,
  `Url` VARCHAR(30) NOT NULL,
  `Fecha_alta` DATE NOT NULL,
  PRIMARY KEY (`Id_usuario`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tiendad_musica`.`Registrado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Registrado` ;

CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Registrado` (
  `Cuota` INT NOT NULL,
  `Fecha_fin` DATE NOT NULL,
  PRIMARY KEY (`Cuota`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Tiendad_musica`.`Album_has_Cancion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Album_has_Cancion` ;

CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Album_has_Cancion` (
  `Album_Id_album` INT NOT NULL,
  `Cancion_Id_cancion` INT NOT NULL,
  PRIMARY KEY (`Album_Id_album`, `Cancion_Id_cancion`),
  CONSTRAINT `fk_Album_has_Cancion_Album`
    FOREIGN KEY (`Album_Id_album`)
    REFERENCES `Tiendad_musica`.`Album` (`Id_album`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Album_has_Cancion_Cancion1`
    FOREIGN KEY (`Cancion_Id_cancion`)
    REFERENCES `Tiendad_musica`.`Cancion` (`Id_cancion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Album_has_Cancion_Cancion1_idx` ON `Tiendad_musica`.`Album_has_Cancion` (`Cancion_Id_cancion` ASC) VISIBLE;

CREATE INDEX `fk_Album_has_Cancion_Album_idx` ON `Tiendad_musica`.`Album_has_Cancion` (`Album_Id_album` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `Tiendad_musica`.`Cancion_has_Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Cancion_has_Usuario` ;

CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Cancion_has_Usuario` (
  `Cancion_Id_cancion` INT NOT NULL,
  `Usuario_Id_usuario` INT NOT NULL,
  `Fecha` DATE NOT NULL,
  PRIMARY KEY (`Cancion_Id_cancion`, `Usuario_Id_usuario`),
  CONSTRAINT `fk_Cancion_has_Usuario_Cancion1`
    FOREIGN KEY (`Cancion_Id_cancion`)
    REFERENCES `Tiendad_musica`.`Cancion` (`Id_cancion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cancion_has_Usuario_Usuario1`
    FOREIGN KEY (`Usuario_Id_usuario`)
    REFERENCES `Tiendad_musica`.`Usuario` (`Id_usuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Cancion_has_Usuario_Usuario1_idx` ON `Tiendad_musica`.`Cancion_has_Usuario` (`Usuario_Id_usuario` ASC) VISIBLE;

CREATE INDEX `fk_Cancion_has_Usuario_Cancion1_idx` ON `Tiendad_musica`.`Cancion_has_Usuario` (`Cancion_Id_cancion` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `Tiendad_musica`.`Cancion_has_Registrado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Cancion_has_Registrado` ;

CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Cancion_has_Registrado` (
  `Cancion_Id_cancion` INT NOT NULL,
  `Registrado_Cuota` INT NOT NULL,
  PRIMARY KEY (`Cancion_Id_cancion`, `Registrado_Cuota`),
  CONSTRAINT `fk_Cancion_has_Registrado_Cancion1`
    FOREIGN KEY (`Cancion_Id_cancion`)
    REFERENCES `Tiendad_musica`.`Cancion` (`Id_cancion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Cancion_has_Registrado_Registrado1`
    FOREIGN KEY (`Registrado_Cuota`)
    REFERENCES `Tiendad_musica`.`Registrado` (`Cuota`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Cancion_has_Registrado_Registrado1_idx` ON `Tiendad_musica`.`Cancion_has_Registrado` (`Registrado_Cuota` ASC) VISIBLE;

CREATE INDEX `fk_Cancion_has_Registrado_Cancion1_idx` ON `Tiendad_musica`.`Cancion_has_Registrado` (`Cancion_Id_cancion` ASC) VISIBLE;

USE `Tiendad_musica` ;

-- -----------------------------------------------------
-- Placeholder table for view `Tiendad_musica`.`Album_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Album_view` (`Id_album` INT, `Fecha_publicacion` INT, `Numero_canciones` INT, `Titulo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Tiendad_musica`.`Cancion_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Cancion_view` (`Id_cancion` INT, `Publica` INT, `Titulo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Tiendad_musica`.`Usuario_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Usuario_view` (`Id_usuario` INT, `Correo` INT, `Url` INT, `Fecha_alta` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Tiendad_musica`.`Grupo_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Grupo_view` (`Nombre` INT, `Componen` INT, `Fecha_creacion` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Tiendad_musica`.`Registrado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Registrado` (`Cuota` INT, `Fecha_fin` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Tiendad_musica`.`Cancion_has_Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Cancion_has_Usuario` (`Cancion_id_cancion` INT, `Usuario_Id_usuario` INT, `Fecha` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Tiendad_musica`.`Album_has_Cancion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Album_has_Cancion` (`Album_Id_album` INT, `Cancion_Id_cancion` INT);

-- -----------------------------------------------------
-- Placeholder table for view `Tiendad_musica`.`Cancion_has_Registrado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Tiendad_musica`.`Cancion_has_Registrado` (`Cancion_Id_cancion` INT, `Registrado_Id_registrado` INT);

-- -----------------------------------------------------
-- View `Tiendad_musica`.`Album_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Album_view`;
DROP VIEW IF EXISTS `Tiendad_musica`.`Album_view` ;
USE `Tiendad_musica`;
CREATE  OR REPLACE VIEW Album_view AS
SELECT Id_album, Fecha_publicacion, Numero_canciones, Titulo FROM Tienda_musica;

-- -----------------------------------------------------
-- View `Tiendad_musica`.`Cancion_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Cancion_view`;
DROP VIEW IF EXISTS `Tiendad_musica`.`Cancion_view` ;
USE `Tiendad_musica`;
CREATE  OR REPLACE VIEW Cancion_view AS
SELECT Id_cancion, Publica, Titulo FROM Tienda_musica;

-- -----------------------------------------------------
-- View `Tiendad_musica`.`Usuario_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Usuario_view`;
DROP VIEW IF EXISTS `Tiendad_musica`.`Usuario_view` ;
USE `Tiendad_musica`;
CREATE  OR REPLACE VIEW Usuario_view AS
SELECT Id_usuario, Correo, Url, Fecha_alta FROM Tienda_musica;

-- -----------------------------------------------------
-- View `Tiendad_musica`.`Grupo_view`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Grupo_view`;
DROP VIEW IF EXISTS `Tiendad_musica`.`Grupo_view` ;
USE `Tiendad_musica`;
CREATE  OR REPLACE VIEW Grupo_view AS
SELECT Nombre, Componen, Fecha_creacion FROM Tienda_musica;

-- -----------------------------------------------------
-- View `Tiendad_musica`.`Registrado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Registrado`;
DROP VIEW IF EXISTS `Tiendad_musica`.`Registrado` ;
USE `Tiendad_musica`;
CREATE  OR REPLACE VIEW Registrado AS
SELECT Cuota, Fecha_fin FROM Tienda_musica;

-- -----------------------------------------------------
-- View `Tiendad_musica`.`Cancion_has_Usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Cancion_has_Usuario`;
DROP VIEW IF EXISTS `Tiendad_musica`.`Cancion_has_Usuario` ;
USE `Tiendad_musica`;
CREATE  OR REPLACE VIEW Cancion_has_Usuario AS
SELECT Cancion_id_cancion, Usuario_Id_usuario, Fecha FROM Tienda_musica;

-- -----------------------------------------------------
-- View `Tiendad_musica`.`Album_has_Cancion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Album_has_Cancion`;
DROP VIEW IF EXISTS `Tiendad_musica`.`Album_has_Cancion` ;
USE `Tiendad_musica`;
CREATE  OR REPLACE VIEW Album_has_Cancion AS
SELECT Album_Id_album, Cancion_Id_cancion FROM Tienda_musica;

-- -----------------------------------------------------
-- View `Tiendad_musica`.`Cancion_has_Registrado`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Tiendad_musica`.`Cancion_has_Registrado`;
DROP VIEW IF EXISTS `Tiendad_musica`.`Cancion_has_Registrado` ;
USE `Tiendad_musica`;
CREATE  OR REPLACE VIEW Cancion_has_Registrado AS
SELECT Cancion_Id_cancion, Registrado_Id_registrado FROM Tienda_musica;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
